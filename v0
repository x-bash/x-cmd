# shellcheck shell=sh disable=SC3043

xrc log init xcmd

___xcmd_readlink_recursive(){
    if [ -L "${1:?Provide link}" ]; then
        local next_link
        next_link="$(readlink "${1}")" || return
        if [ "${next_link#/}" = "$next_link" ]; then
            next_link="$(dirname "${1}")/$next_link"
        fi
        ___xcmd_readlink_recursive "$next_link"
    else
        [ ! -e "${1}" ] && return 1        # File Not Exists
        printf "%s" "$1"
    fi
}


# Section : Unfinished ___xcmd_official_which

# TODO: optimization. Consider sharing the big binary in a common folder.
# But that will introduce risk.
# How?
# 1. Local user $HOME/.x-cmd
# 2. Global sharing folder.
# Consider using the sha512 to calculate the file hash for this purpose.

___xcmd_official_which(){
    X_CMD_SRC_PATH="$HOME/.x-cmd"
    local target="${1:-Provide target path}"
    local cache="$X_CMD_SRC_PATH/$target"

    local target2="${target#@}"
    if [ "$target2" != "$target" ]; then
        target=target2
        cache="$X_CMD_SRC_PATH/___users/$target"
        echo "Not supported yet." >&2
        return 1
    fi

    if CACHE="$cache" _xrc_curl_gitx "$target" <<A
$(___xcmd_mirror)
A
    then
        :
    fi

}

# EndSection

# Section : run by file: get_engine_by_file* and run_by_file*

___xrc_run(){
    local ___xrc_run_filepath="${1:?filepath}";        shift
    xrc "$___xrc_run_filepath"
    local ___xrc_module_name="${___xrc_run_filepath##*/}"
    if [ "$___xrc_module_name" = "$___xrc_module_name" ]; then
        cat <<A
File not containing function: $___xrc_module_name
Exit without execute: $___xrc_module_name "$@"
A
        return 1
    fi
    ___xrc_module_name "$@"
}

___xcmd_xrc_run()(
    ___xrc_run "$@"
)

___xcmd_run_with_engine(){
    local engine="${1:?Please provide engine}";
    local filepath="${2:?Please provide filepath}";        shift 2
    case "$engine" in
        x-bash)     ___xcmd_xrc_run "$filepath" "$@";;
        7z)         xcmd 7z x "$filepath" "$@"      ;;
        *)          xcmd "$engine" "$filepath" "$@" ;;
    esac
}

___xcmd_get_engine_by_file_header(){
    local filepath="${1:?Please provide filepath}"; shift
    case "$(head -n1 "$filepath")" in
        *python*)       printf "%s" python          ;;
        *perl*)         printf "%s" perl            ;;
        *ruby*)         printf "%s" ruby            ;;
        *node*)         printf "%s" node            ;;
        *ts*)           printf "%s" ts              ;;

        *bash*)         printf "%s" bash            ;;
        *zsh*)          printf "%s" zsh             ;;
        *fish*)         printf "%s" fish            ;;
        *ksh*)          printf "%s" ksh             ;;

        *sh*)           printf "%s" sh              ;;
        *)              return 127
    esac
}

___xcmd_run_by_file_header(){
    local filepath="${1:?filepath}"; shift
    local engine
    if engine="$(___xcmd_get_engine_by_file_header "$filepath")"; then
        ___xcmd_run_with_engine "$engine" "$filepath" "$@"
    fi
}

___xcmd_get_engine_by_file_ext(){
    local filepath="${1:?filepath}"; shift
    local ext="${filepath##*.}"
    case "$ext" in
        "$filepath")    return 126                  ;;
        py)             printf "%s" python          ;;
        pl)             printf "%s" perl            ;;
        rb)             printf "%s" ruby            ;;
        js)             printf "%s" node            ;;
        ts)             printf "%s" ts              ;;

        7z)             printf "%s" 7z              ;;

        bash)           printf "%s" bash            ;;
        zsh)            printf "%s" zsh             ;;
        fish)           printf "%s" fish            ;;
        ksh)            printf "%s" ksh             ;;
        sh)             printf "%s" sh              ;;

        *)              return 126                  ;;
    esac
}

___xcmd_run_by_file_ext(){
    local filepath="${1:?filepath}"; shift
    local engine
    if engine="$(___xcmd_get_engine_by_file_ext "$filepath")"; then
        ___xcmd_run_with_engine "$engine" "$filepath" "$@"
    fi
}

___xcmd_get_engine_by_file(){
    local filepath="${1:?filepath}"
    ___xcmd_get_engine_by_file_ext "$filepath" || ___xcmd_get_engine_by_file_header "$filepath"
}

___xcmd_run_by_file(){
    local filepath="${1:?filepath}"; shift

    if [ -L "$filepath" ]; then
        filepath="$(___xcmd_readlink_recursive "$filepath")"
        filepath="$(___xcmd_abspath "$filepath")"
    fi

    if [ -x "$filepath" ]; then
        "$filepath" "$@"
        return
    fi

    local engine
    if engine="$(___xcmd_get_engine_by_file "$filepath")"; then
        ___xcmd_run_with_engine "$engine" "$filepath" "$@"
    else
        ___xcmd_run_with_engine x-bash "$filepath" "$@"
    fi
}

# EndSection

___xcmd_abspath(){
    local target_path="${1:-Please provide path}"
    # $(dirname "$filepath")/
    if [ "${target_path#/}" = "${target_path}" ]; then
        printf "%s" "$(cd "$(dirname "$target_path")" && pwd)/$(basename "$target_path")"
    else
        printf "%s" "$target_path"
    fi
}

# EndSection

# Section : Find And Execute at .x-cmd folder

___xcmd_exe_workspace(){
    local filepath="${1:?filepath}"
    if [ -L "$filepath" ]; then
        local target_path
        target_path="$(___xcmd_readlink_recursive "$filepath")"
        target_path="$(___xcmd_abspath "$target_path")"
    fi

    # TODO: notice. Filepath should be colorized and emphasized.
    # TODO: Hit enter twise will ignore this. But really, should we add this protection?
    if [ -z "$X_DISABLE_WORKSPACE_EXECUTION_CONFIRMATION" ]; then
        while true; do
            printf "%s" \
"=> Running file: $filepath ?
=> Enter or press y to continue, n to abort. default is y: "

            read -r action
            case $action in
                n|no|nein|ne)  cat >&2 <<A
=> You could run the file by yourself:
\033[32m    xcmd \"$filepath\" \033[;0m
A
                    return 1
                    ;;
                ""|y)            printf "%s\n" "";     break ;;
            esac
        done
    fi

    shift
    if [ -x "$filepath" ]; then
        "$filepath" "$@"
        local code=$?
        # Bad interpreter
        if [ $code != 126 ] && [ $code != 127 ]; then
            ___xcmd_run_by_file_ext "$filepath" "$@"
            return
        fi
    fi

    ___xcmd_run_by_file "$filepath" "$@"
    if [ $? = 126 ]; then
        cat >&2 <<A
Cannot find out how to execute the file: "$filepath". Please specify the execution engine. For more information, consult 'x help'
A
    fi

}

# EndSection

______xcmd_get_token(){
    printf "%s" "token"
}

______xcmd_which_one_in_cloud(){
    local uri="${1:?uri}"
    local owner="${uri%%/*}"
    # local path="${url#*/}"

    local target_url="https://sparkle.x-cmd.com/$uri"
    local token
    if token="$(______xcmd_get_token "$owner")"; then
        target_url="$target_url?TOKEN=$token"
    fi

    local CACHE="$X_CMD_SRC_PATH/$uri"
    if xrc_curl "$target_url"; then
        printf "%s" "$CACHE"
    else
        return
    fi
}

___xcmd_default_user(){
    printf "%s" "l"
}


# Section : utilties in static-build
xrc static-build

# _x_xrc_run()(
#     local name=$1;  shift
#     xrc "$name"
#     $name "$@"
# )

# _x_xrc_static_run(){
#     local name=$1;  shift
#     xrc static-build
#     static_build_xrc "$name"
#     "_${name}_bin" "$@"
# }

___xcmd_jq(){
    static_build_init jq jq ___xcmd_jq && ___xcmd_jq          "$@"
}

___xcmd_bw(){
    static_build_init bandwhich bandwhich ___xcmd_bw && ___xcmd_bw          "$@"
}

___xcmd_exa(){
    static_build_init exa exa ___xcmd_exa && ___xcmd_exa      "$@"
}

___xcmd_dust(){
    static_build_init dust dust ___xcmd_dust && ___xcmd_dust  "$@"
}

___xcmd_procs(){
    static_build_init procs procs ___xcmd_procs && ___xcmd_procs  "$@"
}

___xcmd_bat(){
    static_build_init bat bat ___xcmd_bat && ___xcmd_bat      "$@"
}

# EndSection

# Section : Runtime
xrc xcmd/_v0/node
xrc xcmd/_v0/python
# . _v0/node
# . _v0/python

# EndSection

# Section : engine management

# node: node v12 and above, xcmd using v16
# python: v3.6 and above, python using v14


# EndSection

# Section : xaas
___xcmd_notify(){
    local msg="${1:?Provide msg}"
    local title="${2:-""}"

    # Mac
    osascript -e "display notification \"$msg\" with title \"$title\""

    # Linux

    # Windows

    # x-cmd service
}

# queue
# cron

# EndSection


# Section : xcmd main function

___xcmd_var(){
    local _______variable_name="${1%=}"
    if [ "$#" -eq 1 ]; then
        if [ "${_______variable_name}" = "$1" ]; then
            eval "$_______variable_name="
        else
            eval printf "%s" "\"\$$_______variable_name\""
        fi
        return
    fi

    local result
    shift 1
    result="$("$@")"
    eval "$_______variable_name=\"\$result\""
}

xcmd(){
    local subcmd=$1;    shift
    case "$subcmd" in
        rc|src)         xrc "$@"                    ;; # SRC_LOADER=bash eval "$(_xrc_print_code "$@")" ;;
        *=)         ___xcmd_var "$subcmd" "$@"      ;;
        z)          (   xrc zuz && zuz z "$@"   )   ;;
        uz)         (   xrc zuz && zuz uz "$@" )    ;;
        notify)     ___xcmd_notify "$@"             ;;

        ubu|alp|deb|cen|bus) (
            xrc xdk
            xdk "$subcmd" "$@"
        )   ;;
        docker|dk|xdk) (
            xrc xdk
            xdk "$@"
        )   ;;
        sh)         /bin/sh     "$@"                ;;
        bash)       /bin/bash   "$@"                ;;
        zsh)        /bin/zsh    "$@"                ;;
        fish)       /bin/fish   "$@"                ;;
        ksh)        /bin/ksh    "$@"                ;;
        dash)       /bin/ksh    "$@"                ;;
        ash)        /bin/ash    "$@"                ;;
        jar)
            java -jar "$@"
            ;;
        java)
            java "$@"
            ;;
        nvm)
            xrc nvm/v0
            nvm "$@"
            ;;
        pip|pip3)
            ___xcmd_pip3 "$@"
            ;;
        python|py|python3|py3)
            ___xcmd_python3 "$@"
            ;;
        javascript|js|node)
            ___xcmd_node "$@"
            ;;
        npm)        ___xcmd_npm "$@" ;;
        npx)        ___xcmd_npx "$@" ;;
        ts)
            local arg
            local argstr
            while [ $# -ge 0 ]; do
                case "$arg" in
                    -*)     argstr="$argstr $arg"   ;;
                    *)      break
                esac
            done
            local script
            # script="$(___xcmd_official_which "$1")"
            script="$1"
            shift
            eval "$argstr" "$script" "$@"
            ;;
        ruby|rb)
            ruby "$(___xcmd_official_which "$2")" "$@"      ;;
        lua)
            ;;
        7zr)            ( xrc p7zr/v0   &&  p7zr "$@" )     ;;
        7z)             ( xrc p7z/v0    &&  p7z "$@" )      ;;
        ls)             ___xcmd_exa        "$@"             ;;
        ll)             ___xcmd_exa  -l    "$@"             ;;

        ps|procs)       ___xcmd_procs      "$@"             ;;
        du|dust)        ___xcmd_dust       "$@"             ;;
        bat|cat)        ___xcmd_bat        "$@"             ;;
        bw)             ___xcmd_bw         "$@"             ;;
        jq)             ___xcmd_jq         "$@"             ;;

        run)            ___xcmd_run_by_file "$@"            ;;
        search_path)
            local cur="${1:?Provide starting path}"
            local relative_filepath="${2:?Provide relative filepath}"
            while [ ! "$cur" = "" ]; do
                if [ -f "$cur/$relative_filepath" ]; then
                    printf "%s" "$cur"
                    return 0
                fi
                cur=${cur%/*}
            done
            return 1
            ;;
        which|w)
            local p
            local relative_path
            for relative_path in "$@"; do
                xcmd_log debug "Relative Path: $relative_path"
                if p="$(x search_path "$(pwd)" ".x-cmd/$relative_path")"; then
                    printf "%s" "$p/.x-cmd/$relative_path"
                    return 0
                else
                    continue
                fi
            done
            ;;
        _x_cmd_advise_json)     ___xcmd_x_cmd_advise_json "$@" ;;
        *)
            local p
            if p="$(___xcmd_which_one "$subcmd")"; then
                ___xcmd_run_by_file "$p" "$@"
                return
            fi

            printf "%s" "$p"
    esac
}

# EndSection


___xcmd_x_cmd_advise_json(){
    cat <<A
{
    "z": null,
    "uz": null,
    "ubu|alp|deb|cen|bus": null,
    "docker|dk|xdk": null,
    "nvm": null,
    "pip|pip3": null,
    "python|py|python3|py3": null,
    "javascript|js|node": null,
    "npm":  null,
    "ts": null,
    "ruby|rb": null,
    "lua": null,
    "ruby|rb": null,
    "jq": null,
    "ls|ll": null,
    "ps|procs": null,
}
A
    return 126
}

x(){
    xcmd "$@"
}

if [ -z "$XRC_NO_ADVISE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]; then
    xrc advise/v0
    advise x
fi



